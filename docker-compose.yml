services:
  postgres:
    image: postgres:13
    container_name: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 1111
    volumes:
      - ./db-init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - my-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # redis:
  #   image: redis:7.4.1
  #   container_name: redis
  #   ports:
  #     - "6379:6379"
  #   networks:
  #     - my-network
  #   healthcheck:
  #     test: ["CMD", "redis-cli", "ping"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5

  redis-node-1:
    image: bitnami/redis-cluster:latest
    container_name: redis-node-1
    environment:
      - REDIS_NODES=redis-node-1,redis-node-2,redis-node-3,redis-node-4,redis-node-5,redis-node-6
      - ALLOW_EMPTY_PASSWORD=yes
    ports:
      - "6379:6379"
    networks:
      - my-network
    tmpfs:
      - /bitnami/redis

  redis-node-2:
    image: bitnami/redis-cluster:latest
    container_name: redis-node-2
    environment:
      - REDIS_NODES=redis-node-1,redis-node-2,redis-node-3,redis-node-4,redis-node-5,redis-node-6
      - ALLOW_EMPTY_PASSWORD=yes
    ports:
      - "6380:6379"
    networks:
      - my-network
    tmpfs:
      - /bitnami/redis

  redis-node-3:
    image: bitnami/redis-cluster:latest
    container_name: redis-node-3
    environment:
      - REDIS_NODES=redis-node-1,redis-node-2,redis-node-3,redis-node-4,redis-node-5,redis-node-6
      - ALLOW_EMPTY_PASSWORD=yes
    ports:
      - "6381:6379"
    networks:
      - my-network
    tmpfs:
      - /bitnami/redis

  redis-node-4:
    image: bitnami/redis-cluster:latest
    container_name: redis-node-4
    environment:
      - REDIS_NODES=redis-node-1,redis-node-2,redis-node-3,redis-node-4,redis-node-5,redis-node-6
      - ALLOW_EMPTY_PASSWORD=yes
    ports:
      - "6382:6379"
    networks:
      - my-network
    tmpfs:
      - /bitnami/redis

  redis-node-5:
    image: bitnami/redis-cluster:latest
    container_name: redis-node-5
    environment:
      - REDIS_NODES=redis-node-1,redis-node-2,redis-node-3,redis-node-4,redis-node-5,redis-node-6
      - ALLOW_EMPTY_PASSWORD=yes
    ports:
      - "6383:6379"
    networks:
      - my-network
    tmpfs:
      - /bitnami/redis

  redis-node-6:
    image: bitnami/redis-cluster:latest
    container_name: redis-node-6
    environment:
      - REDIS_NODES=redis-node-1,redis-node-2,redis-node-3,redis-node-4,redis-node-5,redis-node-6
      - ALLOW_EMPTY_PASSWORD=yes
    ports:
      - "6384:6379"
    networks:
      - my-network
    tmpfs:
      - /bitnami/redis

  redis-cluster-init-node:
    container_name: redis-cluster-init-node
    image: bitnami/redis-cluster:latest
    command: >
      redis-server --cluster-enabled yes --cluster-config-file nodes.conf --cluster-node-timeout 5000 --appendonly yes
    entrypoint: "/bin/bash -c 'sleep 10 && redis-cli --cluster create redis-node-1:6379 redis-node-2:6379 redis-node-3:6379 redis-node-4:6379 redis-node-5:6379 redis-node-6:6379 --cluster-replicas 1 --cluster-yes'"
    depends_on:
      - redis-node-1
      - redis-node-2
      - redis-node-3
      - redis-node-4
      - redis-node-5
      - redis-node-6
    networks:
      - my-network

  consul:
    image: consul:1.10.3
    container_name: consul
    ports:
      - "8500:8500"
      - "8600:8600/udp"
    command: agent -dev -client=0.0.0.0
    networks:
      - my-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:8500/v1/status/leader"]
      interval: 10s
      timeout: 5s
      retries: 5

  user_service:
    build: ./user_service
    expose:
      - "50051"
      - "8000"
    depends_on:
      consul:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis-cluster-init-node:
        condition: service_started
    environment:
      DATABASE_URL: postgres://postgres:1111@postgres:5432/userdb
    networks:
      - my-network
    deploy:
      replicas: 3
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/status"]
      interval: 10s
      timeout: 5s
      retries: 5

  recommendation_service:
    build: ./recommendation_service
    expose:
      - "8001"
    depends_on:
      consul:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis-cluster-init-node:
        condition: service_started
    environment:
      DATABASE_URL: postgres://postgres:1111@postgres:5432/postdb
    networks:
      - my-network
    deploy:
      replicas: 3
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/status"]
      interval: 10s
      timeout: 5s
      retries: 5

  gateway:
    build: ./gateway
    container_name: gateway
    depends_on:
      - user_service
      - recommendation_service
      - consul
      - sagadb
    ports:
      - "3000:3000"
    networks:
      - my-network
    environment:
      CONSUL_HOST: 'consul'
      CONSUL_PORT: 8500
      RECOMMENDATION_SERVICE_URL: http://recommendation_service:8001
      USER_SERVICE_URL: http://user_service:8000
      SAGA_DB_URL: postgres://postgres:1111@sagadb:5432/sagadb
      REDIS_HOST: redis-cluster-init-node
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:3000/status"]
      interval: 10s
      timeout: 5s
      retries: 5

  sagadb:
    image: postgres:13
    container_name: sagadb
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 1111
    volumes:
      - ./db-init:/docker-entrypoint-initdb.d
    ports:
      - "5433:5432"
    networks:
      - my-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - my-network
    depends_on:
      - gateway
      - user_service
      - recommendation_service
    restart: always

  grafana:
    image: grafana/grafana:latest 
    container_name: grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin 
    depends_on:
      - prometheus
    networks:
      - my-network
    restart: always

networks:
  my-network:
    driver: bridge
