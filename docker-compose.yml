services:
  postgres:
    image: postgres:13
    container_name: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 1111
    volumes:
      - ./db-init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - my-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7.4.1
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - my-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  consul:
    image: consul:1.10.3
    container_name: consul
    ports:
      - "8500:8500"
      - "8600:8600/udp"
    command: agent -dev -client=0.0.0.0
    networks:
      - my-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:8500/v1/status/leader"]
      interval: 10s
      timeout: 5s
      retries: 5

  user_service:
    build: ./user_service
    expose:
      - "8000:8000"
    depends_on:
      consul:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    environment:
      DATABASE_URL: postgres://postgres:1111@postgres:5432/userdb
    networks:
      - my-network
    deploy:
      replicas: 3
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/status"]
      interval: 10s
      timeout: 5s
      retries: 5

  recommendation_service:
    build: ./recommendation_service
    expose:
      - "8001:8000"
    depends_on:
      consul:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    environment:
      DATABASE_URL: postgres://postgres:1111@postgres:5432/postdb
    networks:
      - my-network
    deploy:
      replicas: 3
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/status"]
      interval: 10s
      timeout: 5s
      retries: 5

  gateway:
    build: ./gateway
    container_name: gateway
    depends_on:
      - user_service
      - recommendation_service
      - consul
    ports:
      - "3000:3000"
    networks:
      - my-network
    environment:
      CONSUL_HOST: 'consul'
      CONSUL_PORT: 8500
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:3000/status"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  my-network:
    driver: bridge
